# -*- coding: utf-8 -*-
"""probability_soln.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/105UQuO_WfiThuN9tFXTOQ8woQKYzLKRC

#  <font color='blue'> Review of probability theory using python </font> 
 

We will use pandas to read a CSV file and to store data

Documentation of pandas https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html
"""

#  <font color='blue'> Review of probability theory using python </font> 
 
import pandas as pd
import numpy as np
from google.colab import drive

# install your google drive 
drive.mount('/content/drive/')

df = pd.read_csv('/content/drive/My Drive/Data/student-mat.csv')
df.head(10)  # Select the first 3 rows of data

"""
## Create a smaller data frame with only two columns

Grade A or not is defined as the score G3  > 80%

Absences: high absences, if a student missed 10 or more classes.
"""

newlist = pd.DataFrame()
newlist['Grade'] = np.where(df['G3']*5 >= 80, 1, 0)     # df short notation for data frame
newlist['Absences'] = np.where(df['absences'] >= 10, 1, 0)
newlist['count'] = 1
newlist.head(10)

"""## Compute joint probabilities

"""

Joint_table = pd.pivot_table(
    newlist, 
    values='count', 
    index=['Grade'], 
    columns=['Absences'], 
    aggfunc=np.size, 
    fill_value=0
)

print("Joint Histogram")
print("-------------------")
print(Joint_table)
print("-------------------")

Joint_table = Joint_table.to_numpy()
Joint_Probabilities = Joint_table/len(newlist)

print("Joint Probabilities")
print("-------------------")
print(Joint_Probabilities)
print("-------------------")

"""## Compute marginal, and conditional probabilities

Marginal probability
$$P(X) = -\sum_j p(x_i,y_j)$$

Conditional probability P(X|Y=y): probability of x, if Y is fixed to a specific value
$$P(X|Y) = p(x,y)/p(y)$$

"""

# P(A) Marginal probability of Absences: Sum along the grades axis (rows; axis = 0) 

PA = np.sum(Joint_Probabilities,axis=0)

print("Marginal probability of Absences")
print("-------------------")
print('P(A)', PA)
print("-------------------\n")

# Conditional probabilities of Grades, given A
# Broadcasting along the rows; Broadcasting operations are used in Python to avoid the use of for loops, which are inefficient

PGgivenA = Joint_Probabilities/PA[None,:]

print("Conditional probability of Grades given Absences P(G|A)")
print("------------")
print(PGgivenA)
print("---------------------------------")

"""## Bayes rule example
Probability of getting a grade A, if the student has been absent for more than ten times 

P(Grade=A|Absenses>=10)

P(Grade=A|Absenses<10')
"""

print('P(Grade=A|Absenses>=10)=',PGgivenA[1,1])

print('P(Grade<A|Absenses>=10)=',PGgivenA[0,1])

"""Conditional probability is a valid probability distribution

P(Grade=A|Absenses>=10) + P(Grade<A|Absenses>=10) = 1

It is not a valid pdf in terms of the condition

P(Grade=A|Absenses>=10) + P(Grade=A|Absenses<10) is not equal to 1

"""

print('P(Grade=A|Absenses>=10) + P(Grade<A|Absenses>=10)',PGgivenA[0,1]+PGgivenA[1,1])

print('P(Grade=A|Absenses>=10) + P(Grade=A|Absenses<10)',PGgivenA[1,0]+PGgivenA[1,1])

"""##  Compute the marginal probability P(g) and conditional probability P(A|G) </font>

"""

# P(A) Marginal: Sum along the grades axis 
PG = np.sum(Joint_Probabilities,axis=1)

# Conditional probabilities
PAgivenG = Joint_Probabilities/PA[:,None]

print('P(Absenses>=10|Grade=A)=',PAgivenG[1,1])

print('P(Absenses<10|Grade<A)=',PAgivenG[0,1])